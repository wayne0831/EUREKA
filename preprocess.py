##################################################################################################################################################################
# PROJECT: EUREKA - Outlier Detection
# SECTION: Data Preprocessing
# AUTHOR: Dong-Hyuk Yang
# DATE: since 21.10.12
##################################################################################################################################################################

##################################################################################################################################################################
# import libraries
##################################################################################################################################################################

from DataPrep import DataPrep
import pandas as pd
import pickle
import warnings

##################################################################################################################################################################
# set dataframe options
##################################################################################################################################################################

pd.set_option('display.width', 2000)           # show all columns of dataframe
pd.set_option('display.max_columns', None)     # show all columns of dataframe
pd.set_option('display.max_rows', None)        # show all rows of dataframe
# pd.set_option('mode.chained_assignment', None) # ignore warnings
warnings.filterwarnings(action = 'ignore')     # ignore user warnings

##################################################################################################################################################################
# load preprocessing class
##################################################################################################################################################################

prep = DataPrep()

##################################################################################################################################################################
# load raw data
##################################################################################################################################################################

# load raw data
df_raw = prep.load_data()

# drop rows where null value exists
df_raw = df_raw.dropna(axis = 0) # 1492711 (True: 1489968 / False: 2743 => IR: 543)

# drop rows where null value exists in terminalID
# df_raw = df_raw.dropna(subset = ['terminalID']) # 1595830

##################################################################################################################################################################
# descriptive statistics - before scaling
##################################################################################################################################################################

# extract representative values
df_rep_val = prep.extract_rep_val(df = df_raw, cols = prep.rep_val_cols)

##################################################################################################################################################################
# convert data
##################################################################################################################################################################

# combine LotNo and WireNumber columns in order to make new LotNumber columns
df_raw['LotNumber'] = df_raw['LotNo'].astype(str) + '_' + df_raw['WireNumber'].astype(str)

# drop useless columns
df_raw = df_raw.drop(columns = prep.drop_cols)

# convert terminalEnd into simplified type
df_raw['terminalEnd'] = df_raw['terminalEnd'].str[-1]

##################################################################################################################################################################
# split data by each PK
##################################################################################################################################################################

# split data by each pk columns
df = prep.split_data(df = df_raw, cols = prep.pk_cols)

##################################################################################################################################################################
# normalize data
##################################################################################################################################################################

# normalize data
df_scaled = prep.normalize_date(df = df, cols = prep.norm_cols, n_quant = 1000, distribution = 'normal')

##################################################################################################################################################################
# save pickle
##################################################################################################################################################################

# save
with open('df_raw.pickle', 'wb') as f1:
    pickle.dump(df_raw, f1)

with open('df.pickle', 'wb') as f2:
    pickle.dump(df, f2)

with open('df_scaled.pickle', 'wb') as f3:
    pickle.dump(df_scaled, f3)
